#include <Arduino.h>
#include <WiFi.h>
#include <time.h>
#include <FirebaseESP32.h>
#include <TinyGPSPlus.h>

const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 10800; // GMT+3
const int  daylightOffset_sec = 0;

#define RX 9 // fourth from down left
#define TX 10 //unused


const int muharraq = [[50.629623, 26.265227], [50.629002, 26.265463], [50.627711, 26.266278], [50.62746, 26.266535], [50.627078, 26.266889], [50.62672, 26.267114], [50.626397, 26.267189], [50.625895, 26.267243], [50.625704, 26.26735], [50.623852, 26.268358], [50.623481, 26.268561], [50.623195, 26.268594], [50.622657, 26.268701], [50.622083, 26.268679], [50.621939, 26.268655], [50.62114, 26.268402], [50.620049, 26.268039], [50.61957, 26.267891], [50.619214, 26.267712], [50.618876, 26.267525], [50.618451, 26.267338], [50.617864, 26.267051], [50.617365, 26.266724], [50.616977, 26.266468], [50.616641, 26.266228], [50.616396, 26.265998], [50.616139, 26.265746], [50.615983, 26.265541], [50.615848, 26.265351], [50.615662, 26.265121], [50.615533, 26.264835], [50.615411, 26.264534], [50.6153, 26.264228], [50.615202, 26.264041], [50.61508, 26.263846], [50.614925, 26.263606], [50.61473, 26.263382], [50.614469, 26.263177], [50.614224, 26.263002], [50.613947, 26.262837], [50.613571, 26.262698], [50.613321, 26.262617], [50.612625, 26.262395], [50.612039, 26.262193], [50.611535, 26.262047], [50.611131, 26.261898], [50.610599, 26.261675], [50.609973, 26.261394], [50.60968, 26.261274], [50.609387, 26.26119], [50.609018, 26.261098], [50.608618, 26.261014], [50.60787, 26.260868], [50.607265, 26.260795], [50.606779, 26.260788], [50.605634, 26.260759], [50.604484, 26.260741], [50.603313, 26.260709], [50.602241, 26.260672], [50.600809, 26.260591], [50.600348, 26.260525], [50.600011, 26.260477], [50.599381, 26.260314], [50.598549, 26.260041], [50.597837, 26.259747], [50.596666, 26.259031], [50.59598, 26.258444], [50.595551, 26.258021], [50.595049, 26.257438], [50.594713, 26.25697], [50.594469, 26.256525], [50.59423, 26.256075], [50.594098, 26.255703], [50.593972, 26.255231], [50.592988, 26.252174], [50.594659, 26.256514], [50.594826, 26.256867], [50.595153, 26.257312], [50.595465, 26.257714], [50.595799, 26.258081], [50.596283, 26.258538], [50.596717, 26.258829], [50.597352, 26.259226], [50.597911, 26.259555], [50.598335, 26.259778], [50.598602, 26.25995], [50.599078, 26.260122], [50.599454, 26.260234], [50.599905, 26.260369], [50.600297, 26.260414], [50.601576, 26.260516], [50.603311, 26.260595], [50.605508, 26.260628], [50.607692, 26.260717], [50.608815, 26.260952], [50.609784, 26.261131], [50.610969, 26.261702], [50.612355, 26.262205], [50.613952, 26.26272], [50.614557, 26.26305], [50.615019, 26.263408], [50.615218, 26.263699], [50.615518, 26.264214], [50.615755, 26.264874], [50.616055, 26.265311], [50.61623, 26.265702], [50.616554, 26.265948], [50.617103, 26.266407], [50.618327, 26.267213], [50.61955, 26.26775], [50.620973, 26.268231], [50.622078, 26.268535], [50.62229, 26.268535], [50.622427, 26.268389], [50.62249, 26.268166], [50.622415, 26.267852], [50.622215, 26.267315], [50.62174, 26.266062], [50.621478, 26.265155], [50.621403, 26.264909], [50.621503, 26.264696], [50.621717, 26.264641], [50.622575, 26.264508], [50.623538, 26.264342], [50.624131, 26.264231], [50.624316, 26.264219], [50.624424, 26.26425], [50.624622, 26.264355], [50.624961, 26.26486], [50.62509, 26.26491], [50.625232, 26.265065], [50.625246, 26.265185], [50.625223, 26.265233], [50.625162, 26.265277], [50.62509, 26.265289], [50.625012, 26.265246], [50.624931, 26.2651], [50.624897, 26.265003], [50.62485, 26.26492], [50.624744, 26.264755], [50.624532, 26.264474], [50.62445, 26.264406], [50.624371, 26.264361], [50.624276, 26.264345], [50.622556, 26.264623], [50.622031, 26.264724], [50.621924, 26.26479], [50.62183, 26.264878], [50.621799, 26.264984], [50.621787, 26.265126], [50.621838, 26.265546], [50.621964, 26.266061], [50.622411, 26.267193], [50.622621, 26.267559], [50.622775, 26.26787], [50.622856, 26.267969], [50.622932, 26.26806], [50.623051, 26.26816], [50.623204, 26.268206], [50.623351, 26.268245], [50.623501, 26.268253], [50.623732, 26.268222], [50.623922, 26.268136], [50.625262, 26.267377], [50.626602, 26.266656], [50.627513, 26.266147], [50.629622, 26.264942], [50.630656, 26.264361], [50.63102, 26.264149], [50.631174, 26.264101], [50.631274, 26.264161], [50.631322, 26.264239], [50.631319, 26.264342], [50.631294, 26.264434], [50.631207, 26.264509], [50.630994, 26.264628], [50.630753, 26.264685], [50.63061, 26.264754], [50.629979, 26.265112], [50.62967, 26.265285],[50.593128, 26.252234], [50.594351, 26.255912], [50.594493, 26.256232], [50.595153, 26.257312], [50.595465, 26.257714], [50.595799, 26.258081], [50.596283, 26.258538], [50.596717, 26.258829], [50.597352, 26.259226], [50.597911, 26.259555], [50.598335, 26.259778], [50.598602, 26.25995], [50.599078, 26.260122], [50.599454, 26.260234], [50.599905, 26.260369], [50.600297, 26.260414], [50.601576, 26.260516], [50.603311, 26.260595], [50.605508, 26.260628], [50.607692, 26.260717], [50.608815, 26.260952], [50.609784, 26.261131], [50.610969, 26.261702], [50.612355, 26.262205], [50.613952, 26.26272], [50.614557, 26.26305], [50.615019, 26.263408], [50.615218, 26.263699], [50.615518, 26.264214], [50.615755, 26.264874], [50.616055, 26.265311], [50.61623, 26.265702], [50.616554, 26.265948], [50.617103, 26.266407], [50.618327, 26.267213], [50.61955, 26.26775], [50.620973, 26.268231], [50.622078, 26.268535], [50.62229, 26.268535], [50.622427, 26.268389], [50.62249, 26.268166], [50.622415, 26.267852], [50.622215, 26.267315], [50.62174, 26.266062], [50.621478, 26.265155], [50.621403, 26.264909], [50.621503, 26.264696], [50.621717, 26.264641], [50.622575, 26.264508], [50.623538, 26.264342], [50.624131, 26.264231], [50.624316, 26.264219], [50.624424, 26.26425], [50.624622, 26.264355], [50.624961, 26.26486], [50.62509, 26.26491], [50.625232, 26.265065], [50.625246, 26.265185], [50.625223, 26.265233], [50.625162, 26.265277], [50.62509, 26.265289], [50.625012, 26.265246], [50.624931, 26.2651], [50.624897, 26.265003], [50.62485, 26.26492], [50.624744, 26.264755], [50.624532, 26.264474], [50.62445, 26.264406], [50.624371, 26.264361], [50.624276, 26.264345], [50.622556, 26.264623], [50.622031, 26.264724], [50.621924, 26.26479], [50.62183, 26.264878], [50.621799, 26.264984], [50.621787, 26.265126], [50.621838, 26.265546], [50.621964, 26.266061], [50.622411, 26.267193], [50.622621, 26.267559], [50.622775, 26.26787], [50.622856, 26.267969], [50.622932, 26.26806], [50.623051, 26.26816], [50.623204, 26.268206], [50.623351, 26.268245], [50.623501, 26.268253], [50.623732, 26.268222], [50.623922, 26.268136], [50.625262, 26.267377], [50.626602, 26.266656], [50.627513, 26.266147], [50.629622, 26.264942], [50.630656, 26.264361], [50.63102, 26.264149], [50.631174, 26.264101], [50.631274, 26.264161], [50.631322, 26.264239], [50.631319, 26.264342], [50.631294, 26.264434], [50.631207, 26.264509], [50.630994, 26.264628], [50.630753, 26.264685], [50.63061, 26.264754], [50.629979, 26.265112], [50.62967, 26.265285]];
const int capital =  [[50.592466, 26.250699], [50.592215, 26.250013], [50.592013, 26.249624], [50.591449, 26.248911], [50.590808, 26.24811], [50.590203, 26.247512], [50.58967, 26.246948], [50.588739, 26.245996], [50.588078, 26.245336], [50.586695, 26.244265], [50.585746, 26.243722], [50.584474, 26.242957], [50.583333, 26.242304], [50.582047, 26.241541], [50.581638, 26.24123], [50.579868, 26.240163], [50.578546, 26.239285], [50.577285, 26.23846], [50.57635, 26.237883], [50.57608, 26.237683], [50.575948, 26.237573], [50.575323, 26.237193], [50.575275, 26.237124], [50.575277, 26.23701], [50.575303, 26.236905], [50.575389, 26.236837], [50.575532, 26.23677], [50.575712, 26.236792], [50.578189, 26.238299], [50.579163, 26.238843], [50.579379, 26.238921], [50.579596, 26.238947], [50.579776, 26.238947], [50.579947, 26.238903], [50.580169, 26.238781], [50.580317, 26.238617], [50.580453, 26.238447], [50.580709, 26.238064], [50.580781, 26.237925], [50.580874, 26.237724], [50.580868, 26.237613], [50.580827, 26.237502], [50.580736, 26.237393], [50.580295, 26.237204], [50.579945, 26.237102], [50.57949, 26.236952], [50.579007, 26.236817], [50.578817, 26.23673], [50.578305, 26.2365], [50.577715, 26.236099], [50.577199, 26.235757], [50.576662, 26.235383], [50.576228, 26.235103], [50.57594, 26.2349], [50.575666, 26.234678], [50.575425, 26.234491], [50.575291, 26.234325], [50.575053, 26.234112], [50.574675, 26.23393], [50.57418, 26.233666], [50.573786, 26.233428], [50.573454, 26.233226], [50.573171, 26.233024], [50.572977, 26.232865], [50.572592, 26.232596], [50.572315, 26.232347], [50.572011, 26.232074], [50.571738, 26.231823], [50.571396, 26.231516], [50.571168, 26.231266], [50.570759, 26.230826], [50.570551, 26.230568], [50.570442, 26.230432], [50.570324, 26.230329], [50.569718, 26.230053], [50.56915, 26.229791], [50.568999, 26.229767], [50.568844, 26.229805], [50.568715, 26.229972], [50.568081, 26.230818], [50.56807, 26.230875], [50.568054, 26.230982], [50.568123, 26.23106], [50.568526, 26.231393], [50.568652, 26.23146], [50.568726, 26.231444], [50.568802, 26.231407], [50.569187, 26.230997], [50.569288, 26.230899], [50.569374, 26.230884], [50.569499, 26.230942], [50.570116, 26.231459], [50.570233, 26.231543], [50.570331, 26.231558], [50.570427, 26.231484], [50.570489, 26.231395], [50.570486, 26.231292], [50.570361, 26.231156], [50.570343, 26.231056], [50.570426, 26.230958], [50.570507, 26.23089], [50.570608, 26.230793], [50.570646, 26.230717], [50.570611, 26.230619], [50.570481, 26.230491], [50.570388, 26.230378], [50.570246, 26.230281], [50.569132, 26.229746], [50.568488, 26.229486], [50.567831, 26.229105], [50.566856, 26.228706], [50.566008, 26.228307], [50.565669, 26.228193], [50.565542, 26.227889], [50.565182, 26.227566], [50.564652, 26.227261], [50.564397, 26.227166], [50.564185, 26.227185], [50.564079, 26.227299], [50.563168, 26.22844], [50.562109, 26.229714], [50.56143, 26.230456], [50.561324, 26.23076], [50.56067, 26.234229], [50.560549, 26.235035], [50.5605, 26.23508], [50.560423, 26.235108], [50.560311, 26.235096], [50.559293, 26.235096], [50.557403, 26.235096], [50.557295, 26.235043], [50.557192, 26.234947], [50.557138, 26.234842], [50.557129, 26.234628], [50.557133, 26.23273], [50.557133, 26.232569], [50.55707, 26.232452], [50.556972, 26.232343], [50.556841, 26.232287], [50.556505, 26.232251], [50.556173, 26.232259], [50.555827, 26.232243], [50.555373, 26.232239], [50.555293, 26.232221], [50.555274, 26.232173], [50.55526, 26.232123], [50.555223, 26.232088], [50.555107, 26.232079], [50.555018, 26.232103], [50.554828, 26.232142], [50.554655, 26.232158], [50.554513, 26.23216], [50.554214, 26.232108], [50.553284, 26.232176], [50.552468, 26.232136], [50.552006, 26.232175], [50.551809, 26.232334], [50.55161, 26.232532], [50.551522, 26.233146], [50.551521, 26.234255], [50.551499, 26.234809], [50.551433, 26.235047], [50.551234, 26.235126], [50.550991, 26.235106], [50.550682, 26.234968], [50.550344, 26.234878], [50.549482, 26.234689], [50.548931, 26.23468], [50.548009, 26.234635], [50.546315, 26.234661], [50.544544, 26.23461], [50.543887, 26.234601], [50.541906, 26.234616], [50.541772, 26.234614], [50.54175, 26.234614], [50.541743, 26.234614], [50.541717, 26.234614], [50.541684, 26.234614], [50.541666, 26.234614], [50.541632, 26.234614], [50.541614, 26.234614], [50.536958, 26.234574], [50.536943, 26.234574], [50.536926, 26.234574], [50.536908, 26.234574], [50.536882, 26.234574], [50.536864, 26.234574], [50.536847, 26.234574], [50.536556, 26.234584], [50.536401, 26.234569], [50.536207, 26.234586], [50.535734, 26.234569], [50.535045, 26.234586], [50.534765, 26.234621], [50.53446, 26.234699], [50.534173, 26.234754], [50.534035, 26.234798], [50.533978, 26.234806], [50.533901, 26.234802], [50.533836, 26.23477], [50.53378, 26.234719], [50.533735, 26.234584], [50.53374, 26.234381], [50.533716, 26.233941], [50.533737, 26.233568], [50.533795, 26.233002], [50.533892, 26.232504], [50.533996, 26.232142], [50.534065, 26.231769], [50.534066, 26.231553], [50.534034, 26.231371], [50.533945, 26.231178], [50.533818, 26.23099], [50.533641, 26.230865], [50.5334, 26.230746], [50.533046, 26.230632], [50.53271, 26.230501], [50.532098, 26.230252], [50.531689, 26.230032], [50.531304, 26.22984], [50.530605, 26.229447], [50.530202, 26.229244], [50.5293, 26.228689], [50.528643, 26.228286], [50.527847, 26.227737], [50.526755, 26.226941], [50.525188, 26.225785], [50.524504, 26.225169], [50.523897, 26.224562], [50.523593, 26.22424], [50.523095, 26.223555], [50.52278, 26.223035], [50.522586, 26.222654], [50.522393, 26.222281], [50.522087, 26.221577], [50.521873, 26.22102], [50.521689, 26.220228], [50.521203, 26.217994]];
const int southern = [[50.520808, 26.216493], [50.520579, 26.215922], [50.520158, 26.214697], [50.519117, 26.212415], [50.518195, 26.210717], [50.517001, 26.208625], [50.516577, 26.207996], [50.515541, 26.206449], [50.514006, 26.204493], [50.512514, 26.2027], [50.512167, 26.202264], [50.511726, 26.201707], [50.509926, 26.199587], [50.508587, 26.197741], [50.507873, 26.196679], [50.506464, 26.19451], [50.505719, 26.19316], [50.505135, 26.191758], [50.504401, 26.189937], [50.504217, 26.18933], [50.503908, 26.188401], [50.503564, 26.187154], [50.503135, 26.185425], [50.502867, 26.184262], [50.502716, 26.183253], [50.502565, 26.182398], [50.502401, 26.180678], [50.502293, 26.179445], [50.502213, 26.178059], [50.502188, 26.177237], [50.502175, 26.17562], [50.502244, 26.17407], [50.502467, 26.1717], [50.502748, 26.169417], [50.503073, 26.167346], [50.503294, 26.166191], [50.50412, 26.162626], [50.504448, 26.161492], [50.504988, 26.159623], [50.506049, 26.156359], [50.507302, 26.153226], [50.508056, 26.151114], [50.509183, 26.147628], [50.509641, 26.145484], [50.50995, 26.143289], [50.51008, 26.141631], [50.510123, 26.141013], [50.510142, 26.140578], [50.510137, 26.140252], [50.509993, 26.140052], [50.509884, 26.13996], [50.509751, 26.139882], [50.509548, 26.139817], [50.509374, 26.139795], [50.508989, 26.139859], [50.508954, 26.139871], [50.508899, 26.139882], [50.508602, 26.139969], [50.508287, 26.140088], [50.507979, 26.140209], [50.50768, 26.140371], [50.507191, 26.140627], [50.506844, 26.140836], [50.506509, 26.14099], [50.506181, 26.141138], [50.505646, 26.141314], [50.505272, 26.141403], [50.504556, 26.141581], [50.501229, 26.142392], [50.500444, 26.142583], [50.50012, 26.142643], [50.499937, 26.142776], [50.499933, 26.14278], [50.49993, 26.142784], [50.499927, 26.142789], [50.499923, 26.142793], [50.49992, 26.142797], [50.499917, 26.142801], [50.499914, 26.142806], [50.49991, 26.14281], [50.499907, 26.142814], [50.499903, 26.142818], [50.4999, 26.142822], [50.499896, 26.142826], [50.499892, 26.142829], [50.499888, 26.142833], [50.499884, 26.142837], [50.49988, 26.14284], [50.499876, 26.142844], [50.499872, 26.142847], [50.499867, 26.142851], [50.499863, 26.142854], [50.499859, 26.142858], [50.499854, 26.142861], [50.49985, 26.142864], [50.499846, 26.142868], [50.499841, 26.142871], [50.499836, 26.142874], [50.499832, 26.142877], [50.499827, 26.14288], [50.499822, 26.142882], [50.499818, 26.142885], [50.499813, 26.142888], [50.499808, 26.14289], [50.499803, 26.142893], [50.499798, 26.142895], [50.499793, 26.142898], [50.499788, 26.1429], [50.499783, 26.142903], [50.499778, 26.142905], [50.499772, 26.142907], [50.499767, 26.142909], [50.499762, 26.142911], [50.499757, 26.142913], [50.499752, 26.142916], [50.499746, 26.142918], [50.499741, 26.14292], [50.499736, 26.142921], [50.499731, 26.142923], [50.499725, 26.142925], [50.49972, 26.142927], [50.499715, 26.142929], [50.499709, 26.142931], [50.499704, 26.142932], [50.499698, 26.142934], [50.499693, 26.142935], [50.499687, 26.142937], [50.499682, 26.142938], [50.499676, 26.142939], [50.499671, 26.14294], [50.499665, 26.142941], [50.499659, 26.142942], [50.499654, 26.142943], [50.499648, 26.142944], [50.499643, 26.142944], [50.499637, 26.142945], [50.499631, 26.142946], [50.499626, 26.142946], [50.49962, 26.142947], [50.499614, 26.142947], [50.499609, 26.142948], [50.499603, 26.142948], [50.499597, 26.142949], [50.499591, 26.142949], [50.499586, 26.142949], [50.49958, 26.14295], [50.499574, 26.14295], [50.499569, 26.14295], [50.499563, 26.14295], [50.499557, 26.14295], [50.499551, 26.14295], [50.499546, 26.14295], [50.49954, 26.14295], [50.499534, 26.14295], [50.499529, 26.142949], [50.499523, 26.142949], [50.499517, 26.142949], [50.499512, 26.142948], [50.499506, 26.142947], [50.499501, 26.142946], [50.499495, 26.142945], [50.49949, 26.142944], [50.499484, 26.142943], [50.499479, 26.142942], [50.499473, 26.14294], [50.499468, 26.142939], [50.499462, 26.142937], [50.499457, 26.142936], [50.499451, 26.142934], [50.499446, 26.142933], [50.49944, 26.142931], [50.499435, 26.14293], [50.499429, 26.142929], [50.499424, 26.142927], [50.499417, 26.142926], [50.499412, 26.142923], [50.499407, 26.142921], [50.499402, 26.142918], [50.499397, 26.142916], [50.499392, 26.142914], [50.499387, 26.142911], [50.499382, 26.142909], [50.499377, 26.142906], [50.499207, 26.142907], [50.498758, 26.142985], [50.498116, 26.143149], [50.497275, 26.143358], [50.496557, 26.143564], [50.496002, 26.143706], [50.49523, 26.143927], [50.494842, 26.144028], [50.494295, 26.144125], [50.494018, 26.144106], [50.493604, 26.144089], [50.493333, 26.14407], [50.493209, 26.144158], [50.493105, 26.144276], [50.492923, 26.144302], [50.492727, 26.144318], [50.492621, 26.144242], [50.492567, 26.144129], [50.492563, 26.144001], [50.492607, 26.143884], [50.492714, 26.143807], [50.492852, 26.143775], [50.493022, 26.143789], [50.493209, 26.143858], [50.493386, 26.143928], [50.493399, 26.143932], [50.493607, 26.143972], [50.493616, 26.143976], [50.493937, 26.144006], [50.494114, 26.144012], [50.494133, 26.144011], [50.494407, 26.143993], [50.494421, 26.143987], [50.494784, 26.143917], [50.494798, 26.143917], [50.495283, 26.143816], [50.496323, 26.143488], [50.497994, 26.143042], [50.498694, 26.142889], [50.499007, 26.1428], [50.499177, 26.142717], [50.499275, 26.142609], [50.499343, 26.142411], [50.499417, 26.142117], [50.499386, 26.141709], [50.499241, 26.141123], [50.499108, 26.140556], [50.499017, 26.140228], [50.498905, 26.140128], [50.498827, 26.139979], [50.498804, 26.1398], [50.498848, 26.139641], [50.498871, 26.139431], [50.498761, 26.138943], [50.498629, 26.138326], [50.498377, 26.137709], [50.498058, 26.13705], [50.49785, 26.136502], [50.497683, 26.136213], [50.497606, 26.135915], [50.497485, 26.135626], [50.49749, 26.135239], [50.497468, 26.134871], [50.497489, 26.134443], [50.497411, 26.134334], [50.497344, 26.134244], [50.497333, 26.134115], [50.497434, 26.133916], [50.497501, 26.133747], [50.497635, 26.13336], [50.497757, 26.132675], [50.497804, 26.13195], [50.497738, 26.131761], [50.497716, 26.131572], [50.49784, 26.131374], [50.49802, 26.131107], [50.498177, 26.130551], [50.498401, 26.129626], [50.49839, 26.129308], [50.498324, 26.12912], [50.497718, 26.128974], [50.49699, 26.128914], [50.496692, 26.128705], [50.496395, 26.128526], [50.496197, 26.128229], [50.494913, 26.124331], [50.494584, 26.123439], [50.493923, 26.122516], [50.493792, 26.121921], [50.49386, 26.121237], [50.493862, 26.119989], [50.493929, 26.119602], [50.496122, 26.116097], [50.496321, 26.1158], [50.496289, 26.115533], [50.496455, 26.115295], [50.496786, 26.115355], [50.49715, 26.115594], [50.499335, 26.115597], [50.499666, 26.115538], [50.500096, 26.115836], [50.502536, 26.116345], [50.502857, 26.116106], [50.503807, 26.115017], [50.504619, 26.113814], [50.504692, 26.112987], [50.50429, 26.111855], [50.504151, 26.111236], [50.504, 26.111023], [50.503962, 26.110726], [50.503997, 26.110318], [50.503851, 26.109739], [50.503883, 26.109243], [50.504006, 26.108709], [50.504189, 26.10825], [50.504205, 26.108072], [50.504206, 26.108063], [50.504226, 26.107791], [50.504394, 26.10767], [50.504595, 26.107517], [50.504775, 26.107198], [50.505042, 26.106508], [50.504997, 26.106087], [50.504868, 26.10548], [50.504746, 26.105148], [50.504589, 26.105129], [50.504469, 26.104985], [50.50448, 26.104824], [50.504383, 26.10461], [50.504172, 26.104345], [50.503848, 26.104059], [50.503566, 26.103903], [50.50276, 26.103612], [50.502398, 26.103547], [50.502179, 26.103573], [50.502034, 26.103704], [50.50188, 26.103756], [50.501717, 26.103743], [50.501613, 26.10369], [50.501463, 26.103546], [50.501178, 26.103546], [50.499453, 26.103403], [50.4987, 26.103389], [50.498564, 26.103467], [50.498386, 26.10348], [50.498251, 26.10348], [50.498136, 26.103376], [50.497997, 26.10326], [50.498036, 26.103133], [50.498184, 26.102994], [50.498321, 26.102831], [50.49843, 26.102473], [50.499889, 26.098093], [50.500114, 26.097336], [50.500134, 26.097197], [50.500106, 26.09706], [50.500064, 26.096851], [50.500236, 26.09665], [50.500448, 26.096625], [50.500688, 26.096816], [50.501011, 26.096982], [50.501851, 26.097172], [50.502598, 26.097197], [50.50305, 26.097214], [50.503715, 26.097139], [50.504194, 26.097106], [50.504434, 26.097015], [50.504785, 26.096907], [50.505016, 26.096791], [50.505209, 26.096626], [50.505228, 26.096609], [50.505339, 26.096476], [50.505486, 26.096211], [50.505615, 26.095946], [50.505772, 26.095316], [50.505865, 26.094604], [50.505994, 26.094115], [50.506271, 26.093535], [50.506261, 26.093386], [50.506363, 26.093212], [50.506492, 26.093088], [50.50675, 26.093005], [50.507138, 26.092872], [50.509303, 26.091704], [50.509506, 26.091497], [50.509534, 26.09124], [50.50958, 26.088436], [50.509516, 26.086515], [50.509423, 26.086382], [50.509359, 26.086208], [50.509266, 26.08596], [50.509165, 26.085628], [50.50899, 26.08509], [50.507458, 26.082794], [50.507265, 26.08272], [50.507089, 26.082612], [50.507003, 26.082099], [50.506596, 26.081107], [50.506487, 26.080341], [50.506483, 26.079585], [50.506472, 26.079176], [50.506348, 26.078919], [50.506475, 26.078728], [50.506531, 26.078382], [50.506878, 26.077588], [50.507231, 26.074639], [50.507572, 26.072036], [50.507456, 26.071899], [50.507431, 26.071722], [50.507527, 26.071534], [50.507618, 26.071281], [50.507622, 26.068922], [50.507523, 26.068635], [50.507366, 26.068477], [50.507365, 26.068446], [50.5075, 26.068196], [50.507604, 26.067737], [50.507632, 26.063352], [50.507597, 26.063023], [50.507489, 26.062817], [50.507523, 26.06257], [50.507682, 26.062325], [50.507847, 26.061957], [50.508642, 26.058664], [50.508811, 26.058055]];
const int northern = [[50.508819, 26.057747], [50.508852, 26.057344], [50.508872, 26.057153], [50.50886, 26.057001], [50.50874, 26.056842], [50.50872, 26.05678], [50.508736, 26.05671], [50.508786, 26.056648], [50.508858, 26.056604], [50.508895, 26.05654], [50.5089, 26.056438], [50.508889, 26.055982], [50.508939, 26.055689], [50.508981, 26.055385], [50.509036, 26.055113], [50.509092, 26.054909], [50.509185, 26.054724], [50.509308, 26.054528], [50.509475, 26.05434], [50.509617, 26.054215], [50.50979, 26.054049], [50.509972, 26.0539], [50.510032, 26.05383], [50.51006, 26.053745], [50.510037, 26.053651], [50.509959, 26.053548], [50.509856, 26.05343], [50.509766, 26.0533], [50.509718, 26.053192], [50.509692, 26.053079], [50.509709, 26.05222], [50.509711, 26.05118], [50.509706, 26.051034], [50.509704, 26.050878], [50.509723, 26.050727], [50.509759, 26.050629], [50.509797, 26.050512], [50.509866, 26.050435], [50.510111, 26.050166], [50.510497, 26.049833], [50.510564, 26.049764], [50.510589, 26.049702], [50.510588, 26.049643], [50.510623, 26.049588], [50.51069, 26.049555], [50.510741, 26.049563], [50.510787, 26.049546], [50.510832, 26.049525], [50.511218, 26.049142], [50.511795, 26.048655], [50.512044, 26.048454], [50.512124, 26.048383], [50.512191, 26.048333], [50.512256, 26.048286], [50.512337, 26.048245], [50.512402, 26.048215], [50.512479, 26.048188], [50.512591, 26.048166], [50.51272, 26.048147], [50.512838, 26.048141], [50.512918, 26.048136], [50.512959, 26.048167], [50.512967, 26.048242], [50.512959, 26.04868], [50.512946, 26.048714], [50.512893, 26.048726], [50.512492, 26.048733], [50.508736, 26.056834], [50.508724, 26.05673]];

TinyGPSPlus gps;

 
#define us_to_s 1000000
#define TIME_TO_SLEEP 60 // in seconds
RTC_DATA_ATTR int wakeupCount = 0;


#define FIREBASE_HOST "atmosense-1645e-default-rtdb.europe-west1.firebasedatabase.app"
#define FIREBASE_AUTH "AhxQHb03V4cdg0J6nEXezH3LSePMRcVHjYVFL6FH"
#define API_KEY "AIzaSyDxFLdPFwjwUiI0EHwZvC0cRcEVmR0CiYs"
#define USER_EMAIL "itcs330project@gmail.com"
#define USER_PASSWORD "authenticationtime0841"

#define WIFI_SSID "Zoeilm"
#define WIFI_PASSWORD "hellojavaworld"

FirebaseData firebaseData;
FirebaseJson json;
FirebaseAuth auth;
FirebaseConfig config;
String uid = "Jo9CMWsTaodaaJYdLLOwgt0Spw02";


const int BUFFER_SIZE = 17; // buffer for reading from 7 in 1
byte buf[BUFFER_SIZE];

float lat;
float lon;
int co; //mq-9 sensor
int co2;
int formaldahide;
int tvoc;
int pm25;
int pm10;
int temp;
int hum;
int checksum;
int calculated_checksum;
float temp_dec;
float hum_dec;
float total_temp;
float total_hum;
unsigned long Epoch_Time; 

void wifi_connect(){
  // Connect to wifi using credentials in secrets.h
  Serial.println("Connecting to Wifi.....");
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED){
    delay(500);
    Serial.print(".");
  }
  Serial.println("Connected!");
}




unsigned long print_time(){
  struct tm timeinfo;
  time_t now;
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  if (!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
    return 0;
  }

  char timeHour[3];
  char timeMinute[3];
  char timeSec[3];
  char timeWeekDay[10];
  char dayOfMonth[3];
  char timeMonth[10];
  char timeYear[5];
  strftime(timeHour,3, "%H", &timeinfo);
  strftime(timeMinute,3, "%M", &timeinfo);
  strftime(timeSec,3, "%S", &timeinfo);
  strftime(dayOfMonth,10, "%d", &timeinfo);
  strftime(timeWeekDay,10, "%A", &timeinfo);
  strftime(timeMonth,10, "%B", &timeinfo);
  strftime(timeYear,10, "%Y", &timeinfo);  

  Serial.print(&timeinfo, "%A, %d %B %Y");
  Serial.print(" - ");
  Serial.print(&timeinfo, "%H:%M:%S");

  time(&now);
  
  return now;
}


void sm_sensor_read(){
  while(Serial1.available())
      Serial1.readBytes(buf, BUFFER_SIZE);

  //printing the raw bytes as hex -- debugging
  for(int i = 0; i < BUFFER_SIZE; i++){
      Serial.print(buf[i], HEX);
      Serial.print(" ");
  }
  Serial.println();

  for(int i = 0; i < BUFFER_SIZE; i++){
      Serial.print(buf[i]);
      calculated_checksum += buf[i];
      Serial.print(" ");
  }
  Serial.println();

  // start converting values
  co2 = buf[2] *256 + buf[3]; 
  formaldahide = buf[4] *256 + buf[5];
  tvoc = buf[6] *256 + buf[7];
  pm25 = buf[8]* 256 + buf[9]; 
  pm10 = buf[10]* 256 + buf[11]; 
  temp = buf[12];
  temp_dec = buf[13]*0.1;
  hum = buf[14];
  hum_dec = buf[15]*0.1;
  total_hum = hum + hum_dec;
  total_temp = temp + temp_dec;
  checksum = buf[16];
  calculated_checksum -= checksum;
  calculated_checksum = uint8_t(calculated_checksum);
}

void mq_sensor_read(){} // fix 


void displayInfo()

{
  Serial.print(F("Location: "));

  if (gps.location.isValid()){
    // Serial.print("Lat: ");
    lat = gps.location.lat();
    // Serial.print(lat, 6);
    // Serial.print(F(","));
    // Serial.print("Lng: ");
    lon = gps.location.lng();
    // Serial.println();
  }  
  else
  {
    Serial.print(F("INVALID"));
  }
}

void get_coordinates(){
  while (Serial2.available() > 0)
    if (gps.encode(Serial2.read()))
      displayInfo();
  if (millis() > 5000 && gps.charsProcessed() < 10)
  {
    Serial.println(F("No GPS detected: check wiring."));
    while (true);
  }
}


void print_to_serial(){
  Serial.println("----------------------------------------------------------------------"); 
  Serial.print("Boot# ");
  Serial.println(wakeupCount);
  Serial.print("Date and Time"); 
  Epoch_Time = print_time();
  Serial.println();
  Serial.print("Lattitude: "); 
  Serial.println(lat, 6);
  Serial.print("Longitude: "); 
  Serial.println(lon, 6);
  Serial.print("CO: "); 
  Serial.println(co);
  Serial.print("CO2: "); 
  Serial.println(co2);
  Serial.print("Formaldahide: "); 
  Serial.println(formaldahide);
  Serial.print("TVOC: "); 
  Serial.println(tvoc);
  Serial.print("PM2.5: "); 
  Serial.println(pm25);
  Serial.print("PM10: "); 
  Serial.println(pm10);
  Serial.print("Temperature: "); 
  Serial.println(total_temp);
  Serial.print("Humidity: "); 
  Serial.println(total_hum);
  Serial.print("Checkum: "); 
  Serial.println(checksum);
  Serial.print("Calculated Checksum: ");
  Serial.println(calculated_checksum);
  Serial.println(); 

}


void send_to_firebase(){
  if (Firebase.setFloat (firebaseData, ("/air_parameters/values/" + String(Epoch_Time) + "/co"), co)  
  && Firebase.setFloat (firebaseData, ("/air_parameters/values/" + String(Epoch_Time) + "/co2"), co2)
  && Firebase.setFloat (firebaseData, ("/air_parameters/values/" + String(Epoch_Time) + "/formaldahide"), formaldahide)
  && Firebase.setFloat (firebaseData, ("/air_parameters/values/" + String(Epoch_Time) + "/hum"), total_hum)
  && Firebase.setFloat (firebaseData, ("/air_parameters/values/" + String(Epoch_Time) + "/lat"), lat)
  && Firebase.setFloat (firebaseData, ("/air_parameters/values/" + String(Epoch_Time) + "/lon"), lon)
  && Firebase.setFloat (firebaseData, ("/air_parameters/values/" + String(Epoch_Time) + "/pm10"), pm10)
  && Firebase.setFloat (firebaseData, ("/air_parameters/values/" + String(Epoch_Time) + "/pm25"), pm25)
  && Firebase.setFloat (firebaseData, ("/air_parameters/values/" + String(Epoch_Time) + "/temp"), total_temp)
  && Firebase.setFloat (firebaseData, ("/air_parameters/values/" + String(Epoch_Time) + "/tvoc"), tvoc))

  {
    Serial.println("PASSED");
    Serial.println("------------------------------------");
    Serial.println();
  }
  else 
  {
    Serial.println("FAILED");
    Serial.println("REASON: " + firebaseData.errorReason());
    Serial.println("------------------------------------");
    Serial.println();
  }
}


void setup() {
  Serial.begin(9600);
  Serial1.begin(9600, SERIAL_8N1, RX, TX ); // serial for SM300D2
  Serial2.begin(9600); //gps serial
  
  wifi_connect();
  
  // get_coordinates();
  sm_sensor_read();
  mq_sensor_read();
  print_to_serial();
  ++wakeupCount;
  if (wakeupCount >1) // return back to >3
  {
    if (checksum !=0){
      if (calculated_checksum == checksum){
        config.api_key = API_KEY;
        auth.user.email = USER_EMAIL;
        auth.user.password = USER_PASSWORD;
        Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
        Firebase.reconnectWiFi(true);
        send_to_firebase();
      }
      else {
        Serial.println("Incorrect Checksum");
      }
    }
    else {
      Serial.println("Zero readings");
    }
  }
  else{
    Serial.println("Not warmed up yet");
  }
  
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * us_to_s);
  Serial.println("GOING TO SLEEP");
  esp_deep_sleep_start();

}

void loop() {
}